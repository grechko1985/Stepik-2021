2. ЦИКЛЫ. СТРОКИ. СПИСКИ.

2.1. Цикл While:
a = 5
while a > 0:
	print(a, end =' ')
	a -= 1

Общая схема цикла WHILE:
while ЛОГИЧЕСКОЕ ВЫРАЖЕНИЕ:
	действие 1
	действие 2
	.....
	
ПРИМЕРЫ:
1) Пример №1 - вывести все нечетные числа от 5 до 55:
a = 5
while 5 < a <= 0:
	if a % 2 == 1:
	print(a, end= '')
	a += 1

2) Пример №2 - Каким будет значение i после выполнения фрагмента - ответ 13.
i = 0
while i <= 10:
    i = i + 1
    # До 7 значения i = 7
    if i > 7:
        i = i + 2
        print(i)
        # Начиная с этого момента (с 8 значения) становится 10 + ещё один полный цикл 10 + 1 + 2 = 13
		
3) Пример №3 - вывести треугольник с помощью звездочек:
# Треугольник из звездочек
i = 1
while i <= 10:
    print(i*'*')
    i += 1

Результат:
*
**
***
****
*****
******
*******
********
*********
**********

4) Пример №4 - Число знаков после выполнения цикла. Результат 17.
i = 0
while i < 5:
    print('*')
    # 0 цикл 1 звезда.
    # 1 цикл 1 звезда.
    # 2 цикл 1 звезда.
    # 3 цикл 1 звезда.
    # 4 цикл 1 звезда.
    if i % 2 == 0:
        print('**')
        # 0 цикл 2 звезды.
        # 2 цикл 2 звезды.
        # 4 цикл 2 звезды.
    if i > 2:
        print('***')
        # 3 цикл 3 звезды.
        # 4 цикл 3 звезды.
    i = i + 1
# Сумма 17 звезд.

2.2. Оператор break:
i = 0
while i < 5:
    a = int(input('Введите число a от 0 до 9: '))
    b = int(input('Введите число b от 0 до 9: '))
    if (a == 0) and (b == 0):
        break   # завершение цикла в случае ввода a = 0 и b = 0
    print(a*b)
    i += 1
	
2.3. Оператор continue:
i = 0
while i < 5:
    a = int(input('Введите число a от 0 до 9: '))
    b = int(input('Введите число b от 0 до 9: '))
    if (a == 0) and (b == 0):
        break   # завершение цикла в случае ввода a = 0 и b = 0
    if (a == 0) or (b == 0):
        continue # продолжение цикла в случае, если одно из чисел a = 0 и b = 0
    print(a*b)
    i += 1
	
	
2.4. Цикл for:
for i in 2, 3, 5:
	print(i*i)
	
Результат:
		4
		9
		25
		
for i in range(10):
	print(i*i)
	
Результат:
		0
		1
		...
		81
		
2.5. Функция RANGE, которая возвращает последовательность:
* range(5) - это последовательность от 0 до 5 не включая 5 с шагом в 1, т.е. 0, 1, 2, 3, 4
* range(2,5) - это последовательность от 2 до 5 не включая 5 с шагом в 1, т.е. 2, 3, 4
* range(2,15,4) - это последовательность от 2 до 15 не включая 15 с шагом в 4, т.е. 2, 6, 10, 14.
Общий вид для понимания: range(start=0, to, step=1)

3. СТРОКИ и СИМВОЛЫ
genome = 'ATGG'
genome[0] = 'A'		genome[-1] = 'G'
genome[1] = 'T'		genome[-2] = 'G'
genome[2] = 'G'		genome[-3] = 'T'
genome[3] = 'G'		genome[-4] = 'A'

Строки неизменяемы:
genome = 'ATGG'
genome[1] = 'C'		# Ошибка! 

Перечисление символов строки с помощью индексов c использованием цикла for:
genome = 'ATGG'
for i in range(4):
	print(genome[i])
	
Перечисление символов строки c использованием цикла for:
genome = 'ATGG'
for c in genome:
	print(c)
	
genome = 'CACCTGGAC'
print('Итого, "C" встретилась', genome.count('C'), 'раза')

Строки имеют МЕТОДЫ:
- это функция, которая применяется к конкретной строке.
- s.count(p) - сколько раз строка p встречается встроке s.

МЕТОДЫ У СТРОК:
s = 'aTGcc' p = 'cc'
- s.upper() -> 'ATGCC'
- s.lower() -> 'atgcc'
- s.count(p) -> 1 # сколько раз встречается p в s
- s.find(p) -> 3 # первое вхождение (индекс) p в s
- s.find('A') -> -1 # строка 'A' не входит в s
	* проверка вхождения в строку (лучший метод): if 'TG' in s:'...
- s.replace('c', 'C') -> 'aTGCC' # заменяем все вхождения 'c' на 'C'.
- s.split() - разбиение строки по разделителю и преобразование строки в список
- s.strip([chars]) - удаление пробельных символов в начале и в конце строки
- несколько вызовов методов:
s.upper().count('gt'.upper()) -> 2

# Slicing (взятие диапазонов символов)
dna = 'ATTCGGAGCT'
print(dna[1])		-> T
print(dna[1:4])		-> TTC
print(dna[:4])		-> ATTC
print(dna[4:])		-> GGAGCT
print(dna[-4:])		-> AGCT
print(dna[1:-1])	-> TTCGGAGC
print(dna[1:-1:2])	-> TCGG	(символы от 1 до -1 с шагом 2)
print(dna[::-1])	-> TCGAGGCTTA (символы в обратном порядке)

СПИСКИ:
students = ['Ivan', 'Masha', 'Sasha']
for student in students:
    print('Hello,' "+ student +"!")

Hello, Ivan!                students[0] -> 'Ivan'
Hello, Masha!               students[1] -> 'Masha'
Hello, Sasha!               students[2] -> 'Sasha'

Длина списка:
len(students)
Результат: 3

students[0] -> 'Ivan'
students[1] -> 'Masha'
students[2] -> 'Sasha'
students[:2] -> 'Ivan', 'Masha'

students[-3] -> 'Ivan'
students[-2] -> 'Masha'
students[-1] -> 'Sasha'
students[::-1] -> 'Sasha', 'Masha', 'Ivan'

ОПЕРАЦИИ СО СПИСКАМИ (СЛОЖЕНИЕ И УМНОЖЕНИЕ)
1) Операция сложения (+)
students = ['Ivan', 'Masha', 'Sasha']
teachers = ['Oleg', 'Alex']
students + teachers -> ['Ivan', 'Masha', 'Sasha', 'Oleg', 'Alex']
2) Операция умножения (*):
[0, 1] * 4
Результат: [0, 1, 0, 1, 0, 1, 0, 1]

ИЗМЕНЕНИЕ СПИСКОВ:
В отличие от изученных типов данны (int, float, str) списки (list) являются изменяемыми. Можно изменить конкретный
элемент списка:
students = ['Ivan', 'Masha', 'Sasha']
students[1] = 'Oleg'
print(students)
Результат: ['Ivan', 'Oleg', 'Sasha']

ДОБАВЛЕНИЕ ЭЛЕМЕНТОВ СПИСКА:
students = ['Ivan', 'Masha', 'Sasha']
students.append('Olga')
Результат: students = ['Ivan', 'Masha', 'Sasha', 'Olga']
students += ['Olga']
Результат: students = ['Ivan', 'Masha', 'Sasha', 'Olga', 'Olga']
students += ['Boris', 'Sergey']
Результат: students = ['Ivan', 'Masha', 'Sasha', 'Olga', 'Olga', 'Boris', 'Sergey']
Пустой список: students = []

ВСТАВКА ЭЛЕМЕНТОВ В СПИСОК:
students = ['Ivan', 'Masha', 'Sasha']
students.insert(1, 'Olga')
Результат:
students = ['Ivan', 'Olga', 'Masha', 'Sasha']

УДАЛЕНИЕ ЭЛЕМЕНТОВ ИЗ СПИСКА:
Вариант 1:
students = ['Ivan', 'Masha', 'Sasha']
students.remove('Sasha')
Результат: students = ['Ivan', 'Masha']
Вариант 2:
students = ['Ivan', 'Masha', 'Sasha']
del students[0]
Результат: students = ['Masha', 'Sasha']

ПОИСК ЭЛЕМЕНТА В СПИСКЕ
students = ['Ivan', 'Masha', 'Sasha']
if 'Ivan' in students:
    print('Ivan is here!')
if 'Anna' not in students:
    print('Anna is out!')

ind = students.index('Sasha')
Результат: 2
ind = students.index('Ann')
Результат: ValueError: 'Ann' is not in list

СОРТИРОВКА СПИСКА
1) Не изменяя порядка изначального списка:
students = ['Sasha', 'Ivan', 'Masha']
ordered_students = sorted(students)
Результат: ['Ivan', 'Masha', 'Sasha']
2) Изменяя сам список:
students.sort()
Результат: ['Ivan', 'Masha', 'Sasha']
3) Вывод максимального и минимального значений списка:
students = ['Sasha', 'Ivan', 'Masha']
print(min(students))
print(max(students))
Результат:
Ivan
Sasha

СПИСОК В ОБРАТНОМ ПОРЯДКЕ:
1) С изменением списка:
students = ['Sasha', 'Ivan', 'Masha']
students.reverse()
print(students)
Результат: ['Masha', 'Ivan', 'Sasha']
2) Без изменения списка:
reversed(students)
3) Слайсинг (без изменения списка):
students = ['Sasha', 'Ivan', 'Masha']
print(students[::-1])

ПРИСВОЕНИЕ СПИСКОВ:
a = [1, 'A', 2]
b = a
a[0] = 42
Значение a: [42, 'A', 2]
Значение b: [42, 'A', 2]
b[2] = 30
Значение b: [42, 'A', 30]
Значение a: [42, 'A', 30]

ГЕНЕРАЦИЯ СПИСКОВ:
a = [0] * 5
[0, 0, 0, 0, 0]

a = [0 for i in range(5)]
[0, 0, 0, 0, 0]

a = [i*i for i in range(5)]
[0, 1, 4, 9, 16]

a = [int(i) for i in input().split()]
Вводим числа в одну строчку через пробел, например 1 2 3 4
[1, 2, 3, 4]

ДВУМЕРНЫЕ СПИСКИ:
a = [[1, 2, 3], [4, 5, 6], [7, 8 9])
a[1]:
[4, 5, 6]
a[1][1]:
5

Генерация двумерны списков (массивов):
n = 3
a = [[0] * n] * n
a[0][0] = 5
a = ?
Ответ: [[5, 0, 0], [5, 0, 0], [5, 0, 0]], потому что мы создавали через ссылку.

Правильная генерация списков:
a = [[0] * n for i in range(n)]
a = [[0 for j in range(n)] for i in range(n)]